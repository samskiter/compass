/* these two lines take care of the IO definitions for the device, and the interrupts available for them */
#define F_CPU 8E6	// 8MHz
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdlib.h>
#include "exercise.h"
#include "config.h"
#include "compass.h"
#include <math.h>


/* Intended for ATmega644P */
/* Clock rate is 8.0 MHz  (8MHz external oscillator , no divide by 8, to give CLKIO of 8MHz */

// USART register setup - (from iomxx4.h):

/**** USART0 Compass Set up *****/

/* UCSR0A: 0x00
 RXC0	x/0 - non writable
 TXC0	0 - set to 1 to clear existing transmits
 UDRE0	x/0
 FE0	x/0
 DOR0	x/0
 UPE0	x/0
 U2X0	0 - turn off float speed
 MPCM0	0 - disable multi-processor communication mode
*/

/* UCSR0B: 0x98
 RXCIE0	1 - enable rx interrupts
 TXCIE0	0 - no tx interrupts
 UDRIE0	0 - no tx data register empty interrupt
 RXEN0	1 - enable receiver
 TXEN0	1 - enable transmitter
 UCSZ02	0 - 8 data bits (in combination with UCSZ01/0)
 RXB80	0/x
 TXB80	0 - not usinfg 9th bit of communication
*/

/* UCSR0C: 0x0E
 UMSEL01 0 - asynchronous mode
 UMSEL00 0 - ^
 UPM01	 0 - no parity
 UPM00	 0 - ^read from UDR0 which clears any pending receive-complete interrupts.
Set the global interrupt enable bit in the Status Register SREG, see section 6.3.1 of the
datasheet.
 USBS0	 1 - 2 stop bit
 UCSZ01	 1 - 8 data bits (in combination with UCSZ02)
 UCSZ00	 1 - ^
 UCPOL0	 0 - always set to 0 for async mode
*/

/* Interrupt vectors */
// If we were usinfg interrupts the interrupt vectors would be here
// there is a useful list at    http://www.nongnu.org/avr-libc/user-manual/group__avr__interrupts.html

volatile uint8_t compass_requested = 0;

void compass_init() {
	UBRR0 = 51; 		//set baud to 19200
	UCSR0A = 0x00; 		//see comments in top of file
	UCSR0B = 0x98;		//^
	UCSR0C = 0x0E;		//^
	UCSR0A |= (1<<TXC0);	//clear any existing transmits
	char tmp = UDR0;	//read from UDR0 which clears any pending receive-complete interrupts.
}

void update_angle() {
	PORTB ^= (1<<PB2);
	angle = 0;
	compass_transmit((char) 0x13);
	compass_requested = 2;
	while (compass_requested);
}

void compass_transmit( unsigned char data ) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );

	/* Put data into buffer, sends the data */
	UDR0 = data;
}

uint8_t compass_receive() {
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
	;
	/* Get and return received data from buffer */
	return UDR0;
}

ISR(USART0_RX_vect) {
	uint8_t received = UDR0;
	if (compass_requested == 2) {
		angle = ((uint16_t)received << 8);
		compass_requested--;
	} else if (compass_requested == 1) {
		angle |= received;
		compass_requested--;
	}
	/*angle = (float)PI * ((float)received/(float)128);
	PORTB ^= (1<<PB2);
	updated = 1;*/
}
